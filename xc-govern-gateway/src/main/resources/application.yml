server:
  port: 50201
  servlet:
    context-path: /api # 网关根路径
spring:
  application:
    name: xc-govern-gateway
management:
  endpoints:
    web:
      exposure: #暴露
        include: "endpoint" #注意这里*要加引号，暴露全部，也可以只暴露相应endpoint
  endpoint:
    routes:
      enabled: true # 默认为true
  redis:
    host: ${REDIS_HOST:120.79.134.119}
    port: ${REDIS_PORT:6379}
    timeout: 5000 #连接超时 毫秒
    jedis:
      pool:
        maxActive: 10
        maxIdle: 6
        minIdle: 3
        maxWait: -1 #连接池最大等行时间 -1没有限制
zuul:
  ignored-services: "*" #排除所有基于Eureka服务ID的路由
  #prefix: /api
  routes:
    #文件系统模块
    file-system: #自定义路由 路由名称 保持所有路由名称唯一
      path: /filesystem/** #网关代理路径
      serviceid: xc-service-base-filesystem #微服务名称，网关会从eureka中获取该服务名称下的服务实例的地址
      strip-prefix: false #true：代理转发时去掉前缀(path)，false:代理转发时不去掉前缀(path)
      sensitiveHeaders: #默认zuul会屏蔽cookie、Set-Cookie、Authorization 使其不会传到下游服务，这里设置为空 表示不拦截
      ignoredHeaders: #空表示不过虑任何头
    #课程管理模块
    manage-course:
      path: /course/**
      #自动转发Eureka
      serviceId: xc-service-manage-course
      #手动设置转发
      #url: http://www.baidu.com
      strip-prefix: false
      sensitiveHeaders:
      ignoredHeaders:
    #课程分类
    manage-course-category:
      path: /category/**
      serviceId: xc-service-manage-course
      strip-prefix: false
      sensitiveHeaders:
      ignoredHeaders:
    #学习模块
    xc-service-learning:
      path: /learning/**
      serviceId: xc-service-learning
      strip-prefix: false
      sensitiveHeaders:
      ignoredHeaders:
    #CMS模块
#    manage-cms:
#      path: /cms/**
#      serviceId: xc-service-manage-cms
#      strip-prefix: false
#      sensitiveHeaders:
#      ignoredHeaders:
    #系统服务
    manage-sys:
      path: /sys/**
      serviceId: xc-service-manage-cms
      strip-prefix: false
      sensitiveHeaders:
      ignoredHeaders:
    #用户中心
    service-ucenter:
      path: /ucenter/**
      serviceId: xc-service-ucenter
      sensitiveHeaders:
      strip-prefix: false
      ignoredHeaders:
    #订单服务
    xc-service-manage-order:
      path: /order/**
      serviceId: xc-service-manage-order
      sensitiveHeaders:
      strip-prefix: false
      ignoredHeaders:
eureka:
  client:
    registerWithEureka: true #服务注册开关
    fetchRegistry: true #服务发现开关
    serviceUrl: #Eureka客户端与Eureka服务端进行交互的地址，多个中间用逗号分隔
      defaultZone: ${EUREKA_SERVER:http://localhost:50101/eureka/}
  instance:
    prefer-ip-address:  true  #将自己的ip地址注册到Eureka服务中
    ip-address: 127.0.0.1
    instance-id: ${spring.application.name}:${server.port} #指定实例id
ribbon:
  MaxAutoRetries: 2 #最大重试次数，当Eureka中可以找到服务，但是服务连不上时将会重试，如果eureka中找不到服务则直接走断路器
  MaxAutoRetriesNextServer: 3 #切换实例的重试次数
  OkToRetryOnAllOperations: false  #对所有操作请求都进行重试，如果是get则可以，如果是post，put等操作没有实现幂等的情况下是很危险的,所以设置为false
  ConnectTimeout: 5000  #请求连接的超时时间
  ReadTimeout: 6000 #请求处理的超时时间